#!/usr/bin/env @PYTHON@
# -*- coding: utf-8 -*-
# mainreceiver
# part of the @PACKAGE_NAME@, v. @VERSION@
# @PACKAGE_BUGREPORT@

import sys
sys.path.insert(1, '@pythondir@')

import os, email, getpass
import email.generator
import configparser

import pim_modules
from pim_mailhelper.functions import parseSender, parseHeader, replyStatus

ALLOWED_MAILADDRESSES=[] # only mails from these addresses will be accepted

BASEPATH = '@RCV_BASE_PATH@'
# ~ SAVEMAIL = os.path.join(BASEPATH,'lastmail') # kind-of-debug-feature. this file holds the last mail received. 
SAVEMAIL = ''
REPLYSIGNS=('re:','aw:') # prefixes for answered mails

def initLogger():
    import logging
    logger = logging.getLogger('mainreceiver')
    hdlr = logging.FileHandler(os.path.join(BASEPATH,'pim.log'))
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr) 
    logger.setLevel(logging.INFO)
    return logger

logger = initLogger()

config = configparser.ConfigParser()
config.read('@pimconfdir@/config.ini')

ALLOWED_MAILADDRESSES = [mail for mail in config['Base']['allowed_senders'].split(',')]
logger.info("read allowed senders from config: "+", ".join(ALLOWED_MAILADDRESSES))

msg = email.message_from_file(sys.stdin)
accept = False

sender = parseSender(msg['from'])
if sender == 'unknown':
  logger.warn('could not parse sender from %s', msg['from'])
  sys.exit(1)

# accept message?
if len(ALLOWED_MAILADDRESSES) == 0:
  accept = True
else:
  for recip in ALLOWED_MAILADDRESSES:
    if recip in sender:
      sender = recip
      accept = True
      break
if not accept: 
  if logger is not None: logger.info('declining mail from %s', sender)
  replyStatus(config['Base']['receiver'],'incoming reminder from unallowed mail: '+sender+'\n')
  sys.exit(1)

logger.info('running as %s', getpass.getuser())
logger.info('accepting mail')

if SAVEMAIL != '':
  try:
   out = open(SAVEMAIL, 'w', encoding='utf-8')
  except IOError as ioe:
   pass
  else:
   with out:
     generator = email.generator.Generator(out)
     generator.flatten(msg)
     out.close()

subj = parseHeader(msg['Subject'])
logger.info('mail has subj '+subj)

isreply = any(subj.startswith(word) for word in REPLYSIGNS)
if not isreply:
  if pim_modules.receive(subj,msg):
    logger.info("successfully handled mail")
    sys.exit(0)
elif isreply:
  if pim_modules.receivereply(subj,msg):
    logger.info("successfully handled mail")
    sys.exit(0)
else:
  logThis = 'could not determine action. msg-subject was \''+msg['Subject']+'\' - parsed to \''+subj+'\')'
  logger.warn(logThis)
  replyStatus(sender, logThis, config['Base']['subject_in_reply'], config['Base']['dummy_sender'])
  sys.exit(1)
